
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import static java.lang.Thread.sleep;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author User-Z
 */
public class Cuadrantes extends javax.swing.JFrame implements Runnable {

    Calendar hora;
    DateFormat format;
    Thread h1, h2;
    Object[][] tblAux;
    Cuadrante2 c2;
    Cuadrante3 c3;
    Cuadrante4 c4;
    boolean cambios, memoria;
    
    public Cuadrantes() {
        initComponents();
        format = new SimpleDateFormat("HH:mm:ss");
        setLocationRelativeTo(null);//para centrar la ventana
        setVisible(true);
        setTitle("Proyecto Simulaci√≥n SO");
        h1 = new Thread(this);
        h1.start();
        c2 = new Cuadrante2(tblDatos, tlisto, tbloq, tbs, tls, lblHora, txtp1, txtp2);
        h2 = new Thread(c2);
        tblAux = new Object[tblDatos.getRowCount()][tblDatos.getColumnCount()];
        cambios = memoria = true;
        cuadrante3();
        cuadrante4();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDatos = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tlisto = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tls = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        tbs = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        tbloq = new javax.swing.JTable();
        txtp1 = new javax.swing.JLabel();
        txtp2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel1.setPreferredSize(new Dimension(1100, 800));
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMemoria = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        lblHora = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        jScrollPane17 = new javax.swing.JScrollPane();
        jTable9 = new javax.swing.JTable();
        jScrollPane18 = new javax.swing.JScrollPane();
        jTable10 = new javax.swing.JTable();
        jScrollPane19 = new javax.swing.JScrollPane();
        jTable11 = new javax.swing.JTable();
        jScrollPane20 = new javax.swing.JScrollPane();
        jTable12 = new javax.swing.JTable();
        jScrollPane21 = new javax.swing.JScrollPane();
        jTable13 = new javax.swing.JTable();
        jScrollPane22 = new javax.swing.JScrollPane();
        jTable14 = new javax.swing.JTable();
        jScrollPane23 = new javax.swing.JScrollPane();
        jTable15 = new javax.swing.JTable();
        jScrollPane24 = new javax.swing.JScrollPane();
        tblRAM = new javax.swing.JTable();
        jScrollPane25 = new javax.swing.JScrollPane();
        tblVirtual = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel6.setPreferredSize(new java.awt.Dimension(700, 500));

        tblDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "HIP", "TTP", "Quantum", "PRI", "Status", "SUC1", "HISUC1", "TTSUC1", "SUC2", "HISUC2", "TTSUC2", "HIBS", "TTBS", "HILS", "TTLS", "RM"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDatos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblDatos.setOpaque(false);
        tblDatos.setRowHeight(20);
        jScrollPane1.setViewportView(tblDatos);
        if (tblDatos.getColumnModel().getColumnCount() > 0) {
            tblDatos.getColumnModel().getColumn(0).setPreferredWidth(35);
            tblDatos.getColumnModel().getColumn(1).setPreferredWidth(60);
            tblDatos.getColumnModel().getColumn(2).setPreferredWidth(35);
            tblDatos.getColumnModel().getColumn(3).setPreferredWidth(35);
            tblDatos.getColumnModel().getColumn(4).setPreferredWidth(35);
            tblDatos.getColumnModel().getColumn(5).setPreferredWidth(80);
            tblDatos.getColumnModel().getColumn(6).setPreferredWidth(45);
            tblDatos.getColumnModel().getColumn(7).setPreferredWidth(60);
            tblDatos.getColumnModel().getColumn(8).setPreferredWidth(60);
            tblDatos.getColumnModel().getColumn(9).setPreferredWidth(45);
            tblDatos.getColumnModel().getColumn(10).setPreferredWidth(60);
            tblDatos.getColumnModel().getColumn(11).setPreferredWidth(60);
            tblDatos.getColumnModel().getColumn(12).setPreferredWidth(60);
            tblDatos.getColumnModel().getColumn(13).setPreferredWidth(45);
            tblDatos.getColumnModel().getColumn(14).setPreferredWidth(60);
            tblDatos.getColumnModel().getColumn(15).setPreferredWidth(40);
            tblDatos.getColumnModel().getColumn(16).setPreferredWidth(60);
        }

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setPreferredSize(new java.awt.Dimension(700, 500));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tlisto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", "", ""
            }
        ));
        jScrollPane6.setViewportView(tlisto);
        if (tlisto.getColumnModel().getColumnCount() > 0) {
            tlisto.getColumnModel().getColumn(0).setResizable(false);
            tlisto.getColumnModel().getColumn(1).setResizable(false);
            tlisto.getColumnModel().getColumn(2).setResizable(false);
            tlisto.getColumnModel().getColumn(5).setResizable(false);
            tlisto.getColumnModel().getColumn(7).setResizable(false);
            tlisto.getColumnModel().getColumn(9).setResizable(false);
        }

        jPanel3.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 330, 29));

        tls.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", "", ""
            }
        ));
        jScrollPane7.setViewportView(tls);

        jPanel3.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 400, 330, 29));

        tbs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", "", ""
            }
        ));
        jScrollPane8.setViewportView(tbs);

        jPanel3.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 320, 330, 29));

        tbloq.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", "", ""
            }
        ));
        jScrollPane9.setViewportView(tbloq);

        jPanel3.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, 330, 29));

        txtp1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtp1.setText("000");
        jPanel3.add(txtp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 50, 30, 20));

        txtp2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtp2.setText("000");
        jPanel3.add(txtp2, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 160, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/panel2.5i3.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 490));

        jPanel1.setBackground(new java.awt.Color(255, 51, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setPreferredSize(new java.awt.Dimension(700, 500));
        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentMoved(evt);
            }
        });

        tblMemoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMemoria.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblMemoria);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(412, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel1);

        jPanel4.setBackground(new java.awt.Color(255, 51, 51));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setPreferredSize(new java.awt.Dimension(700, 500));

        jButton1.setText("Mostrar tabla");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Iniciar simulaci√≥n");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        lblHora.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblHora.setText("jLabel1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setHeaderValue("");
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setHeaderValue("");
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setHeaderValue("");
        }

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setHeaderValue("");
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setHeaderValue("");
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setHeaderValue("");
        }

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane11.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setResizable(false);
            jTable3.getColumnModel().getColumn(1).setResizable(false);
            jTable3.getColumnModel().getColumn(1).setHeaderValue("");
            jTable3.getColumnModel().getColumn(2).setResizable(false);
            jTable3.getColumnModel().getColumn(2).setHeaderValue("");
            jTable3.getColumnModel().getColumn(3).setResizable(false);
            jTable3.getColumnModel().getColumn(3).setHeaderValue("");
        }

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane12.setViewportView(jTable4);
        if (jTable4.getColumnModel().getColumnCount() > 0) {
            jTable4.getColumnModel().getColumn(0).setResizable(false);
            jTable4.getColumnModel().getColumn(1).setResizable(false);
            jTable4.getColumnModel().getColumn(1).setHeaderValue("");
            jTable4.getColumnModel().getColumn(2).setResizable(false);
            jTable4.getColumnModel().getColumn(2).setHeaderValue("");
            jTable4.getColumnModel().getColumn(3).setResizable(false);
            jTable4.getColumnModel().getColumn(3).setHeaderValue("");
        }

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane13.setViewportView(jTable5);
        if (jTable5.getColumnModel().getColumnCount() > 0) {
            jTable5.getColumnModel().getColumn(0).setResizable(false);
            jTable5.getColumnModel().getColumn(1).setResizable(false);
            jTable5.getColumnModel().getColumn(1).setHeaderValue("");
            jTable5.getColumnModel().getColumn(2).setResizable(false);
            jTable5.getColumnModel().getColumn(2).setHeaderValue("");
            jTable5.getColumnModel().getColumn(3).setResizable(false);
            jTable5.getColumnModel().getColumn(3).setHeaderValue("");
        }

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane14.setViewportView(jTable6);
        if (jTable6.getColumnModel().getColumnCount() > 0) {
            jTable6.getColumnModel().getColumn(0).setResizable(false);
            jTable6.getColumnModel().getColumn(1).setResizable(false);
            jTable6.getColumnModel().getColumn(1).setHeaderValue("");
            jTable6.getColumnModel().getColumn(2).setResizable(false);
            jTable6.getColumnModel().getColumn(2).setHeaderValue("");
            jTable6.getColumnModel().getColumn(3).setResizable(false);
            jTable6.getColumnModel().getColumn(3).setHeaderValue("");
        }

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane15.setViewportView(jTable7);
        if (jTable7.getColumnModel().getColumnCount() > 0) {
            jTable7.getColumnModel().getColumn(0).setResizable(false);
            jTable7.getColumnModel().getColumn(1).setResizable(false);
            jTable7.getColumnModel().getColumn(1).setHeaderValue("");
            jTable7.getColumnModel().getColumn(2).setResizable(false);
            jTable7.getColumnModel().getColumn(2).setHeaderValue("");
            jTable7.getColumnModel().getColumn(3).setResizable(false);
            jTable7.getColumnModel().getColumn(3).setHeaderValue("");
        }

        jTable8.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane16.setViewportView(jTable8);
        if (jTable8.getColumnModel().getColumnCount() > 0) {
            jTable8.getColumnModel().getColumn(0).setResizable(false);
            jTable8.getColumnModel().getColumn(1).setResizable(false);
            jTable8.getColumnModel().getColumn(1).setHeaderValue("");
            jTable8.getColumnModel().getColumn(2).setResizable(false);
            jTable8.getColumnModel().getColumn(2).setHeaderValue("");
            jTable8.getColumnModel().getColumn(3).setResizable(false);
            jTable8.getColumnModel().getColumn(3).setHeaderValue("");
        }

        jTable9.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane17.setViewportView(jTable9);
        if (jTable9.getColumnModel().getColumnCount() > 0) {
            jTable9.getColumnModel().getColumn(0).setResizable(false);
            jTable9.getColumnModel().getColumn(1).setResizable(false);
            jTable9.getColumnModel().getColumn(1).setHeaderValue("");
            jTable9.getColumnModel().getColumn(2).setResizable(false);
            jTable9.getColumnModel().getColumn(2).setHeaderValue("");
            jTable9.getColumnModel().getColumn(3).setResizable(false);
            jTable9.getColumnModel().getColumn(3).setHeaderValue("");
        }

        jTable10.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane18.setViewportView(jTable10);
        if (jTable10.getColumnModel().getColumnCount() > 0) {
            jTable10.getColumnModel().getColumn(0).setResizable(false);
            jTable10.getColumnModel().getColumn(1).setResizable(false);
            jTable10.getColumnModel().getColumn(1).setHeaderValue("");
            jTable10.getColumnModel().getColumn(2).setResizable(false);
            jTable10.getColumnModel().getColumn(2).setHeaderValue("");
            jTable10.getColumnModel().getColumn(3).setResizable(false);
            jTable10.getColumnModel().getColumn(3).setHeaderValue("");
        }

        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane19.setViewportView(jTable11);
        if (jTable11.getColumnModel().getColumnCount() > 0) {
            jTable11.getColumnModel().getColumn(0).setResizable(false);
            jTable11.getColumnModel().getColumn(1).setResizable(false);
            jTable11.getColumnModel().getColumn(1).setHeaderValue("");
            jTable11.getColumnModel().getColumn(2).setResizable(false);
            jTable11.getColumnModel().getColumn(2).setHeaderValue("");
            jTable11.getColumnModel().getColumn(3).setResizable(false);
            jTable11.getColumnModel().getColumn(3).setHeaderValue("");
        }

        jTable12.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane20.setViewportView(jTable12);
        if (jTable12.getColumnModel().getColumnCount() > 0) {
            jTable12.getColumnModel().getColumn(0).setResizable(false);
            jTable12.getColumnModel().getColumn(1).setResizable(false);
            jTable12.getColumnModel().getColumn(1).setHeaderValue("");
            jTable12.getColumnModel().getColumn(2).setResizable(false);
            jTable12.getColumnModel().getColumn(2).setHeaderValue("");
            jTable12.getColumnModel().getColumn(3).setResizable(false);
            jTable12.getColumnModel().getColumn(3).setHeaderValue("");
        }

        jTable13.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane21.setViewportView(jTable13);
        if (jTable13.getColumnModel().getColumnCount() > 0) {
            jTable13.getColumnModel().getColumn(0).setResizable(false);
            jTable13.getColumnModel().getColumn(1).setResizable(false);
            jTable13.getColumnModel().getColumn(1).setHeaderValue("");
            jTable13.getColumnModel().getColumn(2).setResizable(false);
            jTable13.getColumnModel().getColumn(2).setHeaderValue("");
            jTable13.getColumnModel().getColumn(3).setResizable(false);
            jTable13.getColumnModel().getColumn(3).setHeaderValue("");
        }

        jTable14.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane22.setViewportView(jTable14);
        if (jTable14.getColumnModel().getColumnCount() > 0) {
            jTable14.getColumnModel().getColumn(0).setResizable(false);
            jTable14.getColumnModel().getColumn(1).setResizable(false);
            jTable14.getColumnModel().getColumn(1).setHeaderValue("");
            jTable14.getColumnModel().getColumn(2).setResizable(false);
            jTable14.getColumnModel().getColumn(2).setHeaderValue("");
            jTable14.getColumnModel().getColumn(3).setResizable(false);
            jTable14.getColumnModel().getColumn(3).setHeaderValue("");
        }

        jTable15.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane23.setViewportView(jTable15);
        if (jTable15.getColumnModel().getColumnCount() > 0) {
            jTable15.getColumnModel().getColumn(0).setResizable(false);
            jTable15.getColumnModel().getColumn(1).setResizable(false);
            jTable15.getColumnModel().getColumn(1).setHeaderValue("");
            jTable15.getColumnModel().getColumn(2).setResizable(false);
            jTable15.getColumnModel().getColumn(2).setHeaderValue("");
            jTable15.getColumnModel().getColumn(3).setResizable(false);
            jTable15.getColumnModel().getColumn(3).setHeaderValue("");
        }

        tblRAM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRAM.getTableHeader().setReorderingAllowed(false);
        jScrollPane24.setViewportView(tblRAM);
        if (tblRAM.getColumnModel().getColumnCount() > 0) {
            tblRAM.getColumnModel().getColumn(0).setResizable(false);
            tblRAM.getColumnModel().getColumn(1).setResizable(false);
            tblRAM.getColumnModel().getColumn(1).setHeaderValue("");
            tblRAM.getColumnModel().getColumn(2).setResizable(false);
            tblRAM.getColumnModel().getColumn(2).setHeaderValue("");
            tblRAM.getColumnModel().getColumn(3).setResizable(false);
            tblRAM.getColumnModel().getColumn(3).setHeaderValue("");
            tblRAM.getColumnModel().getColumn(4).setResizable(false);
            tblRAM.getColumnModel().getColumn(7).setResizable(false);
        }

        tblVirtual.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane25.setViewportView(tblVirtual);
        if (tblVirtual.getColumnModel().getColumnCount() > 0) {
            tblVirtual.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(lblHora)
                                .addGap(40, 40, 40)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jScrollPane24, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblHora))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton1)
                                    .addComponent(jButton2))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane24, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(89, Short.MAX_VALUE))
        );

        jScrollPane4.setViewportView(jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Calendar hora = Calendar.getInstance();
        Calendar aux;
        DateFormat format = new SimpleDateFormat("HH:mm:ss");
        for (int i = 0; i < 10; i++) {
            tblDatos.setValueAt(101 + i, i, 0);
            hora.add(Calendar.SECOND, i == 0 ? 120 : (int) (Math.random() * 31 + 30));
            aux = (Calendar) hora.clone();
            tblDatos.setValueAt(format.format(hora.getTime()), i, 1);
            tblDatos.setValueAt((int) (Math.random() * 31 + 180), i, 2);
            tblDatos.setValueAt(5, i, 3);
            tblDatos.setValueAt((int) (Math.random() * 11), i, 4);
            tblDatos.setValueAt((int) (Math.random() * 4 + 2) * 10, i, 6);
            aux.add(Calendar.SECOND, (int) (Math.random() * 31 + 30));
            tblDatos.setValueAt(format.format(aux.getTime()), i, 7);
            tblDatos.setValueAt((int) tblDatos.getValueAt(i, 6) == 50 ? 120 : (int) (Math.random() * 21 + 20), i, 8);
            tblDatos.setValueAt((int) (Math.random() * 4 + 2) * 10, i, 9);
            aux.add(Calendar.SECOND, (int) tblDatos.getValueAt(i, 8) + (int) (Math.random() * 31 + 30));
            tblDatos.setValueAt(format.format(aux.getTime()), i, 10);
            tblDatos.setValueAt((int) tblDatos.getValueAt(i, 9) == 50 ? 120 : (int) (Math.random() * 21 + 20), i, 11);
            aux.add(Calendar.SECOND, (int) tblDatos.getValueAt(i, 11) + (int) (Math.random() * 31 + 30));
            tblDatos.setValueAt(format.format(aux.getTime()), i, 12);
            tblDatos.setValueAt((int) (Math.random() * 21 + 20), i, 13);
            aux.add(Calendar.SECOND, (int) tblDatos.getValueAt(i, 13) + (int) (Math.random() * 31 + 30));
            tblDatos.setValueAt(format.format(aux.getTime()), i, 14);
            tblDatos.setValueAt((int) (Math.random() * 21 + 20), i, 15);
            switch ((int) (Math.random() * 7)) {
                case 0:
                case 1:
                    tblDatos.setValueAt(64, i, 16);
                    break;
                case 2:
                case 3:
                    tblDatos.setValueAt(128, i, 16);
                    break;
                case 4:
                case 5:
                    tblDatos.setValueAt(256, i, 16);
                    break;
                case 6:
                    tblDatos.setValueAt(512, i, 16);
            }
        }
        for (int i = 0; i < tblAux.length; i++)
            for (int j = 0; j < tblAux[i].length; j++)
                tblAux[i][j] = tblDatos.getValueAt(i, j);
        tblDatos.getModel().addTableModelListener(new TableModelListener() {
            
            Calendar auxv = Calendar.getInstance();
            Calendar auxn = Calendar.getInstance();
            Calendar aux = Calendar.getInstance();
            DateFormat format = new SimpleDateFormat("HH:mm:ss");
            long dif;
            
            public void tableChanged(TableModelEvent e) {
                if (cambios)
                    try {
                        switch (e.getColumn()) {
                            case 1:
                                auxv.setTime(format.parse((String) tblAux[e.getFirstRow()][1]));
                                auxn.setTime(format.parse((String) tblDatos.getValueAt(e.getFirstRow(), 1)));
                                dif = auxn.getTimeInMillis() - auxv.getTimeInMillis();
                                aux.setTime(format.parse((String) tblDatos.getValueAt(e.getFirstRow(), 7)));
                                aux.add(Calendar.MILLISECOND, (int) dif);
                                tblDatos.setValueAt(format.format(aux.getTime()), e.getFirstRow(), 7);
                                if (e.getFirstRow() != 9){
                                    aux.setTime(format.parse((String) tblDatos.getValueAt(e.getFirstRow() + 1, 1)));
                                    aux.add(Calendar.MILLISECOND, (int) dif);
                                    tblDatos.setValueAt(format.format(aux.getTime()), e.getFirstRow() + 1, 1);
                                }
                                break;
                            case 6:
                            case 9:
                                tblDatos.setValueAt((int) tblDatos.getValueAt(e.getFirstRow(), e.getColumn()) == 50 ? 120 : (int) (Math.random() * 21 + 20), e.getFirstRow(), e.getColumn() + 2);
                                break;
                            case 7:
                                auxv.setTime(format.parse((String) tblAux[e.getFirstRow()][e.getColumn()]));
                                auxn.setTime(format.parse((String) tblDatos.getValueAt(e.getFirstRow(), e.getColumn())));
                                dif = auxn.getTimeInMillis() - auxv.getTimeInMillis();
                                aux.setTime(format.parse((String) tblDatos.getValueAt(e.getFirstRow(), e.getColumn() + 3)));
                                aux.add(Calendar.MILLISECOND, (int) dif);
                                tblDatos.setValueAt(format.format(aux.getTime()), e.getFirstRow(), e.getColumn() + 3);
                                break;
                            case 10:
                            case 12:
                                auxv.setTime(format.parse((String) tblAux[e.getFirstRow()][e.getColumn()]));
                                auxn.setTime(format.parse((String) tblDatos.getValueAt(e.getFirstRow(), e.getColumn())));
                                dif = auxn.getTimeInMillis() - auxv.getTimeInMillis();
                                aux.setTime(format.parse((String) tblDatos.getValueAt(e.getFirstRow(), e.getColumn() + 2)));
                                aux.add(Calendar.MILLISECOND, (int) dif);
                                tblDatos.setValueAt(format.format(aux.getTime()), e.getFirstRow(), e.getColumn() + 2);
                                break;
                            case 8:
                                dif = (int) tblDatos.getValueAt(e.getFirstRow(), e.getColumn()) - (int) tblAux[e.getFirstRow()][e.getColumn()];
                                aux.setTime(format.parse((String) tblDatos.getValueAt(e.getFirstRow(), e.getColumn() + 2)));
                                aux.add(Calendar.SECOND, (int) dif);
                                tblDatos.setValueAt(format.format(aux.getTime()), e.getFirstRow(), e.getColumn() + 2);
                                break;
                            case 11:
                            case 13:
                                dif = (int) tblDatos.getValueAt(e.getFirstRow(), e.getColumn()) - (int) tblAux[e.getFirstRow()][e.getColumn()];
                                aux.setTime(format.parse((String) tblDatos.getValueAt(e.getFirstRow(), e.getColumn() + 1)));
                                aux.add(Calendar.SECOND, (int) dif);
                                tblDatos.setValueAt(format.format(aux.getTime()), e.getFirstRow(), e.getColumn() + 1);
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(Cuadrantes.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    for (int i = 0; i < tblAux.length; i++)
                        for (int j = 0; j < tblAux[i].length; j++)
                            tblAux[i][j] = tblDatos.getValueAt(i, j);
            }
        });
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        c2.iniciar = true;
        h2.start();
        cambios = false;
        tblDatos.getColumnModel().getColumn(5).setCellRenderer(new DefaultTableCellRenderer(){
            public Component getTableCellRendererComponent(JTable jtable, Object o, boolean bln, boolean bln1, int i, int i1) {
                if (jtable.getValueAt(i, 5) != null){
                    if(jtable.getValueAt(i, 5).toString().equals("STATUS")) {
                        setForeground(Color.BLACK);
                    }
                    if(jtable.getValueAt(i, 5).toString().equals("Ejecutando")) {
                        setForeground(new Color(0, 102, 0));
                    }
                    if(jtable.getValueAt(i, 5).toString().equals("Listo")) {
                        setForeground(new Color(204, 204, 0));
                    }
                    if(jtable.getValueAt(i, 5).toString().equals("Bloqueado")) {
                        setForeground(new Color(204, 0, 0));
                    }
                    if(jtable.getValueAt(i, 5).toString().equals("Bloq/Sus")) {
                        setForeground(new Color(255, 153, 0));
                    }
                    if(jtable.getValueAt(i, 5).toString().equals("Listo/Sus")) {
                        setForeground(new Color(0, 0, 153));
                    }
                    if(jtable.getValueAt(i, 5).toString().equals("Terminado")) {
                        setForeground(Color.BLACK);
                    }
                }
                return super.getTableCellRendererComponent(jtable, o, bln, bln1, i, i1);
            }
        });
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jPanel1ComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentMoved
        c3.paint(jPanel1.getGraphics());
    }//GEN-LAST:event_jPanel1ComponentMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cuadrantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cuadrantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cuadrantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cuadrantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cuadrantes().setVisible(true);

            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable10;
    private javax.swing.JTable jTable11;
    private javax.swing.JTable jTable12;
    private javax.swing.JTable jTable13;
    private javax.swing.JTable jTable14;
    private javax.swing.JTable jTable15;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable jTable8;
    private javax.swing.JTable jTable9;
    private javax.swing.JLabel lblHora;
    private javax.swing.JTable tblDatos;
    private javax.swing.JTable tblMemoria;
    private javax.swing.JTable tblRAM;
    private javax.swing.JTable tblVirtual;
    private javax.swing.JTable tbloq;
    private javax.swing.JTable tbs;
    private javax.swing.JTable tlisto;
    private javax.swing.JTable tls;
    private javax.swing.JLabel txtp1;
    private javax.swing.JLabel txtp2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while (true) {
            hora = Calendar.getInstance();
            lblHora.setText(format.format(hora.getTime()));
            try {
                sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(Cuadrantes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void cuadrante3() {
        tblMemoria.setValueAt("CPU Ocioso", 0, 0);
        tblMemoria.setValueAt("CPU Ocupado", 1, 0);
        tblMemoria.setValueAt("CPU/Proceso", 2, 0);
        tblMemoria.getModel().addTableModelListener(new TableModelListener() {
            
            public void tableChanged(TableModelEvent e) {
                if (e.getColumn() == 1 && e.getFirstRow() == 0 && memoria) {
                    c3 = new Cuadrante3(tblDatos, tblMemoria);
                    memoria = false;
                    for (int i = 1; i < 11; i++) {
                        tblMemoria.setValueAt(Math.pow(Float.parseFloat(tblMemoria.getValueAt(0, 1).toString()), i), 0, i);
                        tblMemoria.setValueAt(1 - Float.parseFloat(tblMemoria.getValueAt(0, i).toString()), 1, i);
                        tblMemoria.setValueAt(Float.parseFloat(tblMemoria.getValueAt(1, i).toString()) / i, 2, i);
                    }
                    c3.paint(jPanel1.getGraphics());
                }
            }
        });
    }
    
    private void cuadrante4() {
        JTable[] nodos = new JTable[15];
        nodos[0] = jTable1;
        nodos[1] = jTable2;
        nodos[2] = jTable3;
        nodos[3] = jTable4;
        nodos[4] = jTable5;
        nodos[5] = jTable6;
        nodos[6] = jTable7;
        nodos[7] = jTable8;
        nodos[8] = jTable9;
        nodos[9] = jTable10;
        nodos[10] = jTable11;
        nodos[11] = jTable12;
        nodos[12] = jTable13;
        nodos[13] = jTable14;
        nodos[14] = jTable15;
        c4 = new Cuadrante4(nodos, tblRAM, tblVirtual, c2);
        c2.c4 = c4;
    }
}
